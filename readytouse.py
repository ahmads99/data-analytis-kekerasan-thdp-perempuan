# -*- coding: utf-8 -*-
"""analisa-kekerasan-terhadap-perempuan-dijakarta.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eitbWsWQPMs4r3C1fx97ov7cMveHG_lN
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

kpem_df = pd.read_csv("kekerasan-perempuan.csv")
kpem_df.head()

kpem_df.info()

pd.to_datetime(kpem_df['periode_data'], format='%Y%m')
# Changed the format to '%Y%m' to match the 'YYYYMM' format in your data

kpem_df['jenis_pelayanan'] = kpem_df['jenis_pelayanan'].astype('category')
# Changed 'df' to 'kpem_df' assuming you want to modify the 'kpem_df' DataFrame

kpem_df.isna().sum()

print("Jumlah duplikasi: ", kpem_df.duplicated().sum())

kpem_df.describe()

kpem_df.describe(include="all")

kpem_df.groupby(by=["tahun", "bulan"]).agg({
    "jenis_pelayanan": "first",  # Use 'first' to get the first value in each group
    "jumlah_yang_dilayani": ["max", "min", "mean", "std"]
})

kpem_df[kpem_df["tahun"] == 2023].groupby(by="jenis_pelayanan")["tahun"].nunique().sort_values(ascending=False)

kpem_df[kpem_df['tahun'] == 2023]['jenis_pelayanan'].value_counts()

kpem_df[(kpem_df['tahun'] == 2023) & (kpem_df['bulan'] == 2)]['jenis_pelayanan'].value_counts()
# Use value_counts() to count occurrences of each unique value in the 'jenis_pelayanan' column

# Statistik deskriptif
print(kpem_df['jenis_pelayanan'].describe())

# Visualisasi distribusi
import matplotlib.pyplot as plt

plt.hist(kpem_df['jenis_pelayanan'], bins=20, edgecolor='black')
plt.title('Distribusi Persentase Korban yang Mendapat Layanan Komprehensif')
plt.xlabel('Persentase')
plt.ylabel('Frekuensi')
plt.show()

# Statistik deskriptif
print(kpem_df['jumlah_yang_dilayani'].describe())

# Visualisasi distribusi jumlah yang dilayani
import matplotlib.pyplot as plt

plt.hist(kpem_df['jumlah_yang_dilayani'], bins=10, edgecolor='black')
plt.title('Distribusi Jumlah Korban yang Mendapat Layanan Komprehensif')
plt.xlabel('Jumlah Korban')
plt.ylabel('Frekuensi')
plt.show()

# Perbandingan jumlah korban berdasarkan jenis pelayanan
kpem_df.groupby('jenis_pelayanan')['jumlah_yang_dilayani'].sum().plot(kind='bar')
plt.title('Jumlah Korban yang Dilayani Berdasarkan Jenis Pelayanan')
plt.xlabel('Jenis Pelayanan')
plt.ylabel('Jumlah Korban')
plt.show()
# Analisis tren berdasarkan bulan
# kpem_df.groupby('tahun' == 2023)['jumlah_yang_dilayani'].sum().plot(kind='line')
kpem_df[kpem_df['tahun'] == 2023].groupby('bulan')['jumlah_yang_dilayani'].sum().plot(kind='line')
plt.title('Tren Jumlah Korban yang Dilayani Berdasarkan Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Korban')
plt.show()

print("Jumlah baris dalam dataset:", len(kpem_df))

print("Jumlah baris duplikat:", kpem_df.duplicated().sum())
kpem_df.drop_duplicates(inplace=True)

print("Rentang nilai jumlah_yang_dilayani:", kpem_df['jumlah_yang_dilayani'].min(), "sampai", kpem_df['jumlah_yang_dilayani'].max())

# Perbandingan jumlah korban berdasarkan jenis pelayanan
import matplotlib.pyplot as plt

kpem_df.groupby('jenis_pelayanan')['jumlah_yang_dilayani'].sum().plot(kind='bar')
plt.title('Jumlah Korban yang Dilayani Berdasarkan Jenis Pelayanan')
plt.xlabel('Jenis Pelayanan')
plt.ylabel('Jumlah Korban')
plt.xticks(rotation=45)  # Rotasi label x-axis jika diperlukan
plt.show()

# Analisis tren berdasarkan bulan
import matplotlib.pyplot as plt

kpem_df.groupby('bulan')['jumlah_yang_dilayani'].sum().plot(kind='line')
plt.title('Tren Jumlah Korban yang Dilayani Berdasarkan Bulan')
plt.xlabel('Bulan')
plt.ylabel('Jumlah Korban')
plt.xticks(range(1, 13))  # Asumsi bulan dari 1 hingga 12
plt.show()

# Visualisasi tren jumlah layanan komprehensif per bulan
kpem_df['periode_data'] = pd.to_datetime(kpem_df['periode_data'], format='%Y%m')
kpem_df.set_index('periode_data', inplace=True)

kpem_df['jumlah_yang_dilayani'].resample('M').sum().plot(kind='line')
plt.title('Tren Jumlah Korban yang Mendapat Layanan Komprehensif')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Korban')
plt.show()
